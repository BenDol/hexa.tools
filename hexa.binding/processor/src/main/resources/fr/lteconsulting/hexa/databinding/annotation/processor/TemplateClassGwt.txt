package $PackageName;

import com.google.gwt.core.client.GWT;
import fr.lteconsulting.hexa.classinfo.gwt.ClazzBundle;
import fr.lteconsulting.hexa.classinfo.gwt.ReflectedClasses;
import fr.lteconsulting.hexa.databinding.properties.Properties;

/**
  * Observable class generated from {@link $SourceClassFqn}
  * Generated by HexaBinding
  * Made by LTE Consulting
  */
public final class $TargetClassNameParametrized extends $SourceClassName
{
	/**
	  * Runtime type information activation glue code.
	  * This interface declares the registration of
	  * the $TargetClassName class.
	  */
	interface ClassBundle extends ClazzBundle
	{
		@ReflectedClasses( classes = { $TargetClassName.class } )
		void register();
	}
	
	/**
	  * Runtime type information activation glue code.
	  * This code effectively registers the runtime type information
	  * for the $TargetClassName class.
	  */
	static
	{
		GWT.<ClassBundle>create( ClassBundle.class ).register();
	}
	
	/**
	 * Constructor(s)
	 * Those are just calling the corresponding
	 * constructor(s) on the super class
	 */ 
	
	$Constructors
	
	/**
	 * Setters and getters
	 */

	$FieldsAndMethods
}
------
	public $TargetClassName( $FormalParameters )
	{
		super( $Parameters );
	}
	
------
	/**
	 * Getter for the '$Property' property
	 * 
	 * @return the property value
	 */
	public $PropertyClass $MethodName()
	{
		return $Property;
	}
	
------
	/**
	 * Setter for the '$Property' property.<br/>
	 * 
	 * Note that it just delegates the call to 
	 * the super class and notify the property
	 * system about the change
	 * 
	 * @param $Property the property value to set
	 */
	@Override
	$Modifiers void $MethodName( $PropertyClass $Property )
	{
		super.$MethodName( $Property );
		Properties.notify( this, "$Property" );
	}
	
------
	/**
	 * Setter for the '$Property' property.<br/>
	 * 
	 * Note that it was generated because no setter
	 * existed for the $Property field. You might
	 * check that it is conform to how you want
	 * the field to be used.
	 * 
	 * @param $Property the property value to set
	 */
	$Modifiers void $MethodName( $PropertyClass $Property )
	{
		this.$Property = $Property;
		Properties.notify( this, "$Property" );
	}
